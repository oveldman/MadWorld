@page "/admin/newfile"
@layout AdminLayout

@using Website.Shared.Models;
@using Website.Services.Interfaces;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager Navigation;
@inject IStorageAuthenticatedService _storageSerivce;
@attribute [Authorize]

@if (ShowValidationGuid)
{
    <div class="alert alert-warning" role="alert">
        Id must be a GUID
    </div>
}

@if (ShowValidationFileType)
{
    <div class="alert alert-warning" role="alert">
        File is not correct. Try again.
    </div>
}

@if (ShowValidationFileSize)
{
    <div class="alert alert-warning" role="alert">
        File size is too big. The maxium size is 10 MB.
    </div>
}

<h1>Upload File</h1>

<EditForm EditContext="@newFileContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            <InputText @bind-Value="NewFileID" />
            <InputFile OnChange="LoadFileInMemory" class="form-control" />
            <button type="button" class="btn btn-success" @onclick="UploadNewFile">Upload file</button>
            <button type="button" class="btn btn-success" @onclick="GenerateID">Generate ID</button>
        </label>
    </p>
</EditForm>

@code {
    private bool ShowValidationGuid;
    private bool ShowValidationFileType;
    private bool ShowValidationFileSize;
    private string NewFileID;
    private int MaxSize = 10240000;

    private AddFileRequest NewFile = new();

    private EditContext newFileContext;

    protected override void OnInitialized()
    {
        newFileContext = new(NewFile);
    }

    private async Task LoadFileInMemory(InputFileChangeEventArgs e)
    {
        ResetValidation();
        IBrowserFile browserFile = e.File;
        if (Validate(browserFile))
        {
            StreamContent fileContent = new StreamContent(browserFile.OpenReadStream(MaxSize));
            byte[] body = await fileContent.ReadAsByteArrayAsync();
            NewFile.BodyBase64 = Convert.ToBase64String(body);
            NewFile.Name = browserFile.Name;
            NewFile.Type = browserFile.ContentType;
        }
    }

    private void GenerateID()
    {
        NewFileID = Guid.NewGuid().ToString();
    }

    private async Task UploadNewFile()
    {
        ResetValidation();
        if (!Guid.TryParse(NewFileID, out Guid newID))
        {
            ShowValidationGuid = true;
            return;
        }

        if (Validate(NewFile))
        {
            NewFile.ID = newID;

            BaseModel response = await _storageSerivce.Create(NewFile);

            if (response.Succeed)
            {
                Navigation.NavigateTo($"/admin/allfiles");
            }
        }
    }

    private void ResetValidation()
    {
        ShowValidationGuid = false;
        ShowValidationFileType = false;
        ShowValidationFileSize = false;
    }

    private bool Validate(AddFileRequest request)
    {
        bool valid = !string.IsNullOrEmpty(request.BodyBase64) && !string.IsNullOrEmpty(request.Name) && !string.IsNullOrEmpty(request.Type);
        ShowValidationFileType = !valid;
        return valid;
    }

    private bool Validate(IBrowserFile browserFile)
    {
        bool valid = browserFile.Size < (MaxSize - 1);
        ShowValidationFileSize = !valid;
        return valid;
    }
}
