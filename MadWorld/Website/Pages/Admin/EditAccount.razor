@page "/admin/accounts/edit/{id}"
@layout AdminLayout

@using Microsoft.AspNetCore.Authorization
@using Website.Services.Interfaces;
@using Website.Shared.Models.Admin;
@using Website.Shared.Models;
@attribute [Authorize]
@inject NavigationManager Navigation;
@inject IAdminService _adminService;

@if (ShowValidation)
{
    <div class="alert alert-warning" role="alert">
        @ErrorMessage
    </div>
}

@if (Id.Equals("0"))
{
    <p>Create a new account</p>
}
else
{
    <p>Edit account of id: @Id</p>
}

<EditForm EditContext="UserContext" OnSubmit="@ProcessUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="input-group mb-3">
        <span class="input-group-text" id="label-email">Email</span>
        <input @bind="User.Email" type="email" class="form-control" aria-label="Email" aria-describedby="label-email" autocomplete="new-password">
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="label-username">Username</span>
        <input @bind="User.Username" type="text" class="form-control" aria-label="Username" aria-describedby="label-username">
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="label-password">Password</span>
        <input @bind="User.Password" type="password" class="form-control" aria-label="Password" aria-describedby="label-password" autocomplete="new-password">
    </div>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" @bind="User.TwoFactorEnabled" id="TwoFactorEnabled">
        <label class="form-check-label" for="TwoFactorEnabled">
            Two factor enabled
        </label>
    </div>

    <h3>Roles</h3>
    <p>This person has access to the following roles: </p>
    @if (User?.Roles?.Any() ?? false)
    {
        for (int i = 0; i < User.Roles.Count(); i++)
        {
            string roleID = $"Role{i}"; 
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="User.Roles[i].HasAccess" id="@roleID">
                <label class="form-check-label" for="@roleID">
                    @User.Roles[i].Name
                </label>
            </div>
        }
    }
    else
    {
        <p><i>There are no roles at the moment.</i></p>
    }

    <button type="submit" class="btn btn-success">Save account</button>
</EditForm>



@code {
    [Parameter]
    public string Id { get; set; }

    private bool ShowValidation { get; set; }
    private string ErrorMessage { get; set; }

    private UserModel User { get; set; } = new() { IsNew = true };
    private EditContext UserContext;

    protected override async Task OnInitializedAsync()
    {
        UserContext = new(User);

        if (Guid.TryParse(Id, out Guid accountID))
        {
            User = await _adminService.GetUser(accountID);
        }

        UserContext = new(User);
    }

    private async Task ProcessUser()
    {
        if (UserContext.Validate())
        {
            BaseModel response = await _adminService.SaveUser(User);

            if (response.Succeed)
            {
                Navigation.NavigateTo($"/admin/accounts");
            }

            ShowValidation = !response.Succeed;
            ErrorMessage = response.ErrorMessage;
        }
    }
}
