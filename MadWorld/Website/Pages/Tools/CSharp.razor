@page "/compiler/csharp"

@using Microsoft.CodeAnalysis;
@using System.Reflection;
@using Website.Manager;
@using Website.Manager.Models;
@using Website.Manager.Interfaces;
@inject ICodeEditorManager _editorManager;

<div class="mb-3">
    <label for="method-torun" class="form-label">Method</label>
    <input type="text" class="form-control" id="method-torun" @bind="MethodTest">
</div>
<MonacoEditor @ref="_editor" Id="cshap-editor" CssClass="Editor-XML" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" />
<button type="button" class="btn btn-success" @onclick="Run">Run</button>

<div class="card">
    <div class="card-body">
        <pre>@ResultText</pre>
    </div>
</div>
<div class="card">
    <div class="card-body">
        @foreach (string log in CompileLogs)
        {
            <p>@log</p>
        }
    </div>
</div>

@code {

    private string[] decorationIds;
    private string ResultText { get; set; }
    private string MethodTest { get; set; } = "Main";
    private MonacoEditor _editor { get; set; }

    private List<string> CompileLogs { get; set; } = new();
    private List<MetadataReference> references { get; set; }

    public async Task<Assembly> Compile()
    {
        string code = await _editor.GetValue();
        CompiledCodeResult result = _editorManager.CompileCode(code, references);

        if (result?.CompileLogs?.Any() ?? false)
        {
            CompileLogs.AddRange(result.CompileLogs);
        }

        return result.Assembly;
    }

    public async Task Run()
    {
        await Init();
        var assembly = await this.Compile();
        if (assembly != null)
        {
            CompileLogs = _editorManager.RunCode(assembly, MethodTest, CompileLogs);
            ShowResult();
        }
    }

    public async Task Init()
    {
        CompileLogs = new();
        ResultText = string.Empty;
        EditorManager.Reset();

        if (references == null)
        {
            references = await _editorManager.GetAllReferenceStreams();
        }
    }

    private void ShowResult()
    {
        ResultText = EditorManager.ResultToPrint;
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "csharp",
            GlyphMargin = true,
            Theme = "Visual Studio Dark",
            Value = @"
using Website.Manager;
namespace MadWorldEmulator
{
    public class Program
    {
        public void Main()
        {
            EditorManager.WriteLine(" + "\"Hello World!\"" + @");
        }
    }
}
"
        };
    }

    private async Task EditorOnDidInit(MonacoEditorBase editor)
    {
        await _editor.AddCommand((int)KeyMode.CtrlCmd | (int)KeyCode.KEY_H, (editor, keyCode) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
                                    };

        decorationIds = await _editor.DeltaDecorations(null, newDecorations);
        // You can now use 'decorationIds' to change or remove the decorations
    }

    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }
}
