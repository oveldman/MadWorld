@page "/PlanningPoker/Room/{id}"
@using Microsoft.AspNetCore.SignalR.Client;
@using Blazored.LocalStorage;
@using Website.Settings;
@using Website.Shared.Models.PlanningPoker;

@inject NavigationManager NavigationManager;
@implements IAsyncDisposable;
@inject HubConnection hubConnection;
@inject ILocalStorageService _localStorage;
@inject NavigationManager Navigation;

<h1>@Id : @account.Username</h1>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string Id { get; set; }

    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private PokerAccount account = new PokerAccount();

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await GetAccount();

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("JoinRoom", Id, account.Username);
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private async Task<PokerAccount> GetAccount()
    {
        var pokerAccount = await _localStorage.GetItemAsync<PokerAccount>(LocalStorageNames.PlanningPokerAccount);

        if (pokerAccount == null || !pokerAccount.RoomName.Equals(Id))
        {
            Navigation.NavigateTo($"/PlanningPoker/Find");
        }

        account = pokerAccount;
        return pokerAccount;
    }
}
