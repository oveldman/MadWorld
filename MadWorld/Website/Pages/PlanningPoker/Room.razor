@page "/PlanningPoker/Room/{id}"
@using Microsoft.AspNetCore.SignalR.Client;
@using Blazored.LocalStorage;
@using Website.Settings;
@using Website.Shared.Models.PlanningPoker;

@inject NavigationManager NavigationManager;
@implements IAsyncDisposable;
@inject HubConnection hubConnection;
@inject ILocalStorageService _localStorage;
@inject NavigationManager Navigation;

<h1>@Id : @account.Username</h1>

<hr />

<button type="button" class="btn btn-primary" @onclick="ResetValue" disabled="@(!IsConnected)">Reset</button>
<button type="button" class="btn btn-primary" @onclick="RevealCards" disabled="@(!IsConnected)">Reveal</button>

<hr />

<div class="row">
    @foreach (var member in members)
    {
        int? cardIndex = (int?)cards.FirstOrDefault(c => c.MemberID == member.ID)?.CardValue;
        string cardname = cardIndex != null ? cardIndex.ToString() : "Empty" ;
        cardname = revealCards || cardIndex == null || member.SessionID == currentSession ? cardname : "Back";
        string imageCardPath = $"images/pokercards/Card{cardname}.png";
        <div class="col">
            <img class="poker-card" src="@imageCardPath" />
            <p>@member.Username</p>
        </div>
    }
</div>

<hr />

<div class="row">
    @foreach (PokerCardTypes card in Enum.GetValues(typeof(PokerCardTypes)))
    {
        string imageCardPath = $"images/pokercards/Card{(int)card}.png";
        <div class="col">
            <img class="poker-card" src="@imageCardPath" @onclick="() => SendValue(card)" />
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private PokerAccount account = new PokerAccount();
    private List<PokerMember> members = new List<PokerMember>();
    private List<PokerCard> cards = new List<PokerCard>();
    private bool revealCards = false;
    private Guid currentSession = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On<List<PokerMember>>("MembersChanged", (newMembers) =>
        {
            members = newMembers;
            StateHasChanged();
        });

        hubConnection.On<bool>("ResetCards", (reset) =>
        {
            if (reset)
            {
                cards = new List<PokerCard>();
                revealCards = false;
            }
            StateHasChanged();
        });

        hubConnection.On<PokerCard>("SetCard", (newCard) =>
        {
            PokerCard currentCard = cards.FirstOrDefault(c => c.MemberID == newCard.MemberID);

            if (currentCard != null)
            {
                currentCard.CardValue = newCard.CardValue;
            }
            else
            {
                cards.Add(newCard);
            }

            StateHasChanged();
        });

        hubConnection.On<bool>("RevealCards", (showCards) =>
        {
            revealCards = showCards;
            StateHasChanged();
        });

        await GetAccount();

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("JoinRoom", Id, account.Username, currentSession);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async Task SendValue(PokerCardTypes card)
    {
        await hubConnection.SendAsync("SetCard", account.Username, card);
    }

    public async Task RevealCards()
    {
        await hubConnection.SendAsync("RevealCards", account.Username);
    }

    public async Task ResetValue()
    {
        await hubConnection.SendAsync("ResetCards", account.Username);
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private async Task<PokerAccount> GetAccount()
    {
        var pokerAccount = await _localStorage.GetItemAsync<PokerAccount>(LocalStorageNames.PlanningPokerAccount);

        if (pokerAccount == null || !pokerAccount.RoomName.Equals(Id))
        {
            Navigation.NavigateTo($"/PlanningPoker/Find");
        }

        account = pokerAccount;
        return pokerAccount;
    }
}
