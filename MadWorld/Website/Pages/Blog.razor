@page "/blog"

@using System.Text;
@using Website.Shared.Models;
@using Website.Services.Interfaces;
@inject IBlogService _blogService;

<h3>Welcome on my blog!</h3>

@foreach (PostModel post in Blogs.Posts)
{
    <div class="card">
        <div class="card-header">
            @post.Title
        </div>
        <div class="card-body">
            @ConvertToHtml(post.Body)
        </div>
    </div>
}

<nav aria-label="Page navigation blog-paging">
    <ul class="pagination">
        @if (ShowBeforePage)
        {
            <li class="page-item"><a class="page-link" @onclick="() => GetPosts(BeforeCurrentPage)">Previous</a></li>
            <li class="page-item"><a class="page-link" @onclick="() => GetPosts(BeforeCurrentPage)">@BeforeCurrentPage</a></li>
        }
        <li class="page-item"><a class="page-link" @onclick="() => GetPosts(CurrentPage)">@CurrentPage</a></li>
        @if (ShowAfterPage)
        {
            <li class="page-item"><a class="page-link" @onclick="() => GetPosts(AfterCurrentPage)">@AfterCurrentPage</a></li>
            <li class="page-item"><a class="page-link" @onclick="() => GetPosts(AfterCurrentPage)">Next</a></li>
        }
    </ul>
</nav>

@code {
    private int MinimumPage = 1;

    private int CurrentPage = 1;
    private int TotalPages = 10;
    private BlogsModel Blogs = new();

    private int BeforeCurrentPage => CurrentPage - 1;
    private int AfterCurrentPage => CurrentPage + 1;

    private bool ShowBeforePage => CurrentPage > MinimumPage;
    private bool ShowAfterPage => CurrentPage < Blogs.TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await GetPosts(CurrentPage);
    }

    private async Task GetPosts(int setPage)
    {
        CurrentPage = setPage;
        Blogs = await _blogService.GetAll(CurrentPage, TotalPages);
    }

    private MarkupString ConvertToHtml(string base64)
    {
        byte[] byteBody = Convert.FromBase64String(base64);
        string stringBody = Encoding.ASCII.GetString(byteBody);
        return new MarkupString(stringBody);
    }
}
